"use strict";(self.webpackChunketh_hooks=self.webpackChunketh_hooks||[]).push([[7268],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return h}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=o.createContext({}),p=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=p(e.components);return o.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),h=a,m=u["".concat(i,".").concat(h)]||u[h]||d[h]||r;return n?o.createElement(m,c(c({ref:t},l),{},{components:n})):o.createElement(m,c({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,c=new Array(r);c[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var p=2;p<r;p++)c[p]=n[p];return o.createElement.apply(null,c)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8211:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return p},toc:function(){return l},default:function(){return u}});var o=n(7462),a=n(3366),r=(n(7294),n(3905)),c=["components"],s={sidebar_position:2},i="Common examples",p={unversionedId:"guides/common-examples",id:"guides/common-examples",title:"Common examples",description:"Use ethersAppContext & hooks",source:"@site/docs/guides/common-examples.mdx",sourceDirName:"guides",slug:"/guides/common-examples",permalink:"/eth-hooks/docs/guides/common-examples",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guides/common-examples.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"guides",previous:{title:"Quick start",permalink:"/eth-hooks/docs/guides/intro"},next:{title:"Basic Tutorials",permalink:"/eth-hooks/docs/guides/tutorial-basics/basic"}},l=[{value:"Use ethersAppContext &amp; hooks",id:"use-ethersappcontext--hooks",children:[],level:2},{value:"How to pass a provider directly into <code>ethersAppContext</code>",id:"how-to-pass-a-provider-directly-into-ethersappcontext",children:[],level:2},{value:"Using <code>ethersAppContext</code> with <code>web3Modal</code>",id:"using-ethersappcontext-with-web3modal",children:[{value:"1. Create your <code>web3Config</code>",id:"1-create-your-web3config",children:[],level:3},{value:"2. Create a function that returns a <code>TEthersModalConnector</code>",id:"2-create-a-function-that-returns-a-tethersmodalconnector",children:[],level:3},{value:"3. Create a login event handler",id:"3-create-a-login-event-handler",children:[],level:3}],level:2},{value:"How to use <code>ContractAppContext</code>",id:"how-to-use-contractappcontext",children:[{value:"1. Generating types for your contract",id:"1-generating-types-for-your-contract",children:[{value:"An example on to use <code>eth-sdk</code> for external contracts",id:"an-example-on-to-use-eth-sdk-for-external-contracts",children:[],level:4},{value:"An example of Hardhat with typechain",id:"an-example-of-hardhat-with-typechain",children:[],level:4}],level:3},{value:"2. Creating the context with <code>contractsContextFactory</code>",id:"2-creating-the-context-with-contractscontextfactory",children:[],level:3},{value:"3. Using hooks to get your contracts",id:"3-using-hooks-to-get-your-contracts",children:[],level:3}],level:2}],d={toc:l};function u(e){var t=e.components,n=(0,a.Z)(e,c);return(0,r.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"common-examples"},"Common examples"),(0,r.kt)("h2",{id:"use-ethersappcontext--hooks"},"Use ethersAppContext & hooks"),(0,r.kt)("p",null,"Here's an example of using the context"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const ethersContext = useEthersContext();\n// you now have access to signer, provider, account (address), etc...  See IEthersContext for details\n")),(0,r.kt)("p",null,"Now use a hook"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// ---------------------\n// \ud83c\udfe6 get your balance\n// ---------------------\n// This instance uses the provider from the context in useBalance internally\nconst [yourLocalBalance, update, status] = useBalance(ethersContext.account);\nZ;\n")),(0,r.kt)("p",null,"Here's how to change an update interval"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// normally the hooks update every block\nconst [yourLocalBalance, update, status] = useBalance(ethersContext.account);\n// you can change the update schedule to every 10 blocks, the default is every 1 block:\nconst [yourLocalBalance, update, status] = useBalance(ethersContext.account, { blockNumberInterval: 10 });\n// you can change the update schedule to every polling, min is 10000ms\nconst [yourLocalBalance, update, status] = useBalance(ethersContext.account, {\n  refetchInterval: 100000,\n  blockNumberInterval: undefined,\n});\n// you can use advanced react-query update options\nconst [yourLocalBalance, update, status] = useBalance(ethersContext.account, {\n  blockNumberInterval: 1,\n  query: { refetchOnWindowFocus: true },\n});\n")),(0,r.kt)("p",null,"An example of overriding the provider from the context"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// get an adaptor from a provider or signer\nconst [mainnetAdaptor] = useEthersAdaptorFromProviderOrSigners(exampleMainnetProvider);\n// pass in the override variable\nconst [yourMainnetBalance] = useBalance(ethersContext.account, mergeDefaultUpdateOptions(), {\n  adaptorEnabled: true,\n  adaptor: mainnetAdaptor,\n});\n")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Check out Scaffold-eth-typescript ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/scaffold-eth-typescript/blob/next/packages/vite-app-ts/src/components/main/hooks/useScaffoldHooksExamples.tsx"},"useScaffoldHooksExamples.tsx")," for more examples."))),(0,r.kt)("h2",{id:"how-to-pass-a-provider-directly-into-ethersappcontext"},"How to pass a provider directly into ",(0,r.kt)("inlineCode",{parentName:"h2"},"ethersAppContext")),(0,r.kt)("p",null,"You can pass a provider into ",(0,r.kt)("inlineCode",{parentName:"p"},"EthersAppContext")," directly if you don't want to use ",(0,r.kt)("inlineCode",{parentName:"p"},"EthersModalConnect")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"web3Modal"),". This would be a way to override the default mechansim if you have your own login UI."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"<EthersAppContext customGetEthersAppProviderLibrary={customFunction}>\n  <YourMainPage />\n</EthersAppContext>\n")),(0,r.kt)("p",null,"In the above example ",(0,r.kt)("inlineCode",{parentName:"p"},"customFunction")," should be a function that returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"TEthersProvider")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// a simple example\nexport type TGetEthersAppProviderLibrary = () => TEthersProvider;\n\n// a function that transforms a provider into a TEthersProvider\nexport type TGetEthersAppProviderLibrary = (\n  provider: TEthersProvider | ExternalProvider | JsonRpcFetchFunc | any\n) => TEthersProvider;\n")),(0,r.kt)("h2",{id:"using-ethersappcontext-with-web3modal"},"Using ",(0,r.kt)("inlineCode",{parentName:"h2"},"ethersAppContext")," with ",(0,r.kt)("inlineCode",{parentName:"h2"},"web3Modal")),(0,r.kt)("p",null,"Ethers context will automatically give you a way to integrate ",(0,r.kt)("inlineCode",{parentName:"p"},"web3Modal")," into your app."),(0,r.kt)("h3",{id:"1-create-your-web3config"},"1. Create your ",(0,r.kt)("inlineCode",{parentName:"h3"},"web3Config")),(0,r.kt)("p",null,"You can check out the ",(0,r.kt)("inlineCode",{parentName:"p"},"web3Config")," github repo for a detailed explanation: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Web3Modal/web3modal#using-with-ethersjs"},"web3 modal"),".\nYou can also see an example in Scaffold-eth-typescript, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/scaffold-eth-typescript/blob/next/packages/vite-app-ts/src/config/web3ModalConfig.ts#L8"},"scaffold-eth-typescript web3ModalConfig.ts"),"."),(0,r.kt)("h3",{id:"2-create-a-function-that-returns-a-tethersmodalconnector"},"2. Create a function that returns a ",(0,r.kt)("inlineCode",{parentName:"h3"},"TEthersModalConnector")),(0,r.kt)("p",null,"This function should have a signature that returns ",(0,r.kt)("inlineCode",{parentName:"p"},"TEthersModalConnector"),", which is an interface that is implemented by ",(0,r.kt)("a",{parentName:"p",href:"https://scaffold-eth.github.io/eth-hooks/api-typedocs/classes/EthersContext.EthersModalConnector.html"},"EthersModalConnector")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type TCreateEthersModalConnector = (id?: string) => TEthersModalConnector | undefined;\n")),(0,r.kt)("p",null,"For example in Scaffold-eth-typescript ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/scaffold-eth-typescript/blob/next/packages/vite-app-ts/src/components/main/hooks/useScaffoldAppProviders.ts#L53"},"createLoginConnector")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// theme: can be 'light' or 'dark'\n// web3Config: is for web3Modal configuration\n// id: allows you to programatically to a provider defined for the modal, see the web3Modal for details.\nconst createLoginConnector: TCreateEthersModalConnector = useCallback(\n  (id?: string) => {\n    if (web3Config) {\n      const connector = new EthersModalConnector({ ...web3Config, theme: currentTheme }, id);\n      return connector;\n    }\n  },\n  [web3Config, currentTheme]\n);\n")),(0,r.kt)("p",null,"You can find the details for ",(0,r.kt)("a",{parentName:"p",href:"https://scaffold-eth.github.io/eth-hooks/api-typedocs/classes/EthersContext.EthersModalConnector.html"},"EthersModalConnector")," in the api docs."),(0,r.kt)("h3",{id:"3-create-a-login-event-handler"},"3. Create a login event handler"),(0,r.kt)("p",null,"You can then call the function we created above in the the event handler of your login button anywhere in your app."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"  ...\n  const ethersContext = useEthersContext();\n\n  // to handle a login\n  const handleLoginClick = (): void => {\n    if (createLoginConnector != null && ethersContext?.openModal != null) {\n      const connector = createLoginConnector();\n      ethersContext.openModal(connector);\n    }\n  };\n\n  // to handle a log out\n  const handleLogoutClick = (): void => {\n    if (ethersContext?.disconnectModal != null) {\n      ethersContext.disconnectModal();\n    }\n  };\n")),(0,r.kt)("h2",{id:"how-to-use-contractappcontext"},"How to use ",(0,r.kt)("inlineCode",{parentName:"h2"},"ContractAppContext")),(0,r.kt)("h3",{id:"1-generating-types-for-your-contract"},"1. Generating types for your contract"),(0,r.kt)("p",null,"First, you'll have to do is generate your contract types for Hardhat and external contracts."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Add ",(0,r.kt)("inlineCode",{parentName:"li"},"eth-sdk")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"typechain with hardhat")," to generate them to a folder such as ",(0,r.kt)("inlineCode",{parentName:"li"},"generated/contract-types"),"."),(0,r.kt)("li",{parentName:"ul"},"Pull ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/scaffold-eth/scaffold-eth-typescript"},"scaffold-eth-typescript")," for an example of this.")),(0,r.kt)("h4",{id:"an-example-on-to-use-eth-sdk-for-external-contracts"},"An example on to use ",(0,r.kt)("inlineCode",{parentName:"h4"},"eth-sdk")," for external contracts"),(0,r.kt)("p",null,"Scaffold-eth-typescript uses ",(0,r.kt)("inlineCode",{parentName:"p"},"eth-sdk")," to generate types and abi for use by external contracts.\n\ud83d\udcdd Note: This would a dev dependency on your project."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a config of ",(0,r.kt)("inlineCode",{parentName:"li"},"{contractNames: address}")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/scaffold-eth/scaffold-eth-typescript/blob/next/packages/vite-app-ts/src/config/externalContractsConfig.ts"},"externalContractConfig.ts")),(0,r.kt)("li",{parentName:"ul"},"a config for ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/scaffold-eth/scaffold-eth-typescript/blob/next/packages/vite-app-ts/scripts/eth-sdk-config.ts.bak"},"eth-sdk-config.ts")),(0,r.kt)("li",{parentName:"ul"},"and calling the ",(0,r.kt)("inlineCode",{parentName:"li"},"eth-sdk")," with the folder of your config file as a parameter e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"yarn eth-sdk -p ./src/generated"))),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Learn more at the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dethcrypto/eth-sdk"},"eth-sdk github")))),(0,r.kt)("h4",{id:"an-example-of-hardhat-with-typechain"},"An example of Hardhat with typechain"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Check out the excellent ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dethcrypto/TypeChain"},"typechain docs"),". You can find an example in scaffold-eth-typescript ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/scaffold-eth-typescript/blob/next/packages/hardhat-ts/hardhat.config.ts"},"hardhat.config.ts"))),(0,r.kt)("h3",{id:"2-creating-the-context-with-contractscontextfactory"},"2. Creating the context with ",(0,r.kt)("inlineCode",{parentName:"h3"},"contractsContextFactory")),(0,r.kt)("p",null,"Create a config that returns a config of your contracts. This would be hetrogenous key value pair. Each value is generated by the helper functions in eth-hooks."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// a function that generates the config. Note that your types have to exist already!\nexport const contractConnectorConfig = () => {\n  try {\n    const result = {\n      // \ud83d\ude4b\ud83c\udffd\u200d\u2642\ufe0f Add your hadrdhat contracts here\n      YourContract: createConnectorForHardhatContract(\n        'YourContract',\n        hardhatContracts.YourContract__factory,\n        hardhatContractsJson\n      ),\n\n      // \ud83d\ude4b\ud83c\udffd\u200d\u2642\ufe0f Add your external contracts here, make sure to define the address in `externalContractsConfig.ts`\n      DAI: createConnectorForExternalContract('DAI', externalContracts.DAI__factory, externalContractsAddressMap),\n      UNI: createConnectorForExternalContract('UNI', externalContracts.UNI__factory, externalContractsAddressMap),\n\n      // \ud83d\ude4b\ud83c\udffd\u200d\u2642\ufe0f Add your external abi here (unverified contracts)`\n      // DAI: createConnectorForExternalAbi('DAI', { 1: {address: 'xxxx'}}, abi),\n    } as const;\n\n    return result;\n  } catch (e) {\n    console.error(\n      '\u274c contractConnectorConfig: ERROR with loading contracts please run `yarn contracts:build or yarn contracts:rebuild`.  Then run `yarn deploy`!',\n      e\n    );\n  }\n\n  return undefined;\n};\n\n// create a type from the return value of the function above\nexport type TAppConnectorList = NonNullable<ReturnType<typeof contractConnectorConfig>>;\n")),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"contractContextFactory")," to create your hooks and context in your app from the above configuration. You can copy the code below and use it to get started fast."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// you're passing in function `contractConnectorConfig` from above into the factory.  You then have to use the type we defined to type the factory outputs.\nexport const {\n  ContractsAppContext,\n  useAppContractsActions,\n  useAppContracts,\n  useLoadAppContracts,\n  useConnectAppContracts,\n} = contractsContextFactory<\n  /* the contractNames (keys) in config output */\n  keyof TAppConnectorList,\n  /* the type of the config output  */\n  TAppConnectorList,\n  /* A type that infers the value of each contractName: contract pair*/\n  TTypedContract<keyof TAppConnectorList, TAppConnectorList>\n>(contractConnectorConfig);\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"See scaffold-eth-typescript ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/scaffold-eth-typescript/blob/next/packages/vite-app-ts/src/config/contractContext.ts"},"contractContext.tsx")," and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/scaffold-eth-typescript/blob/next/packages/vite-app-ts/src/config/contractConnectorConfig.ts"},"contractConnectorConfig.ts")," for full examples on how to do this.")),(0,r.kt)("h3",{id:"3-using-hooks-to-get-your-contracts"},"3. Using hooks to get your contracts"),(0,r.kt)("p",null,"Now that you've created the context and hooks above you can use them in your app. The first step is to load your contracts using the hooks you've created with the factory."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// \ud83d\udefb load contracts\nuseLoadAppContracts();\n")),(0,r.kt)("p",null,"Next you'll want to connect the contracts."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// \ud83c\udfed connect to  contracts for current network & signer\nuseConnectAppContracts(asEthersAdaptor(ethersContext));\n\n// \ud83c\udfed connect to contracts for mainnet network & signer\nconst [mainnetAdaptor] = useEthersAdaptorFromProviderOrSigners(mainnetProvider);\nuseConnectAppContracts(mainnetAdaptor);\n")),(0,r.kt)("p",null,"Now you can get typed contracts anywhere in your app."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const yourContract = useAppContracts('YourContract', ethersContext.chainId);\nconst mainnetDai = useAppContracts('DAI', NETWORKS.mainnet.chainId);\n")),(0,r.kt)("p",null,"You can read values from the contracts using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useContractReader")," hook"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// keep track of a variable from the contract in the local React state:\nconst [purpose, update] = useContractReader(\n  /* the contract */\n  yourContract,\n  /* the contract variable or function to read */\n  yourContract?.purpose,\n  /* the arguments, they are typed tuple */\n  [],\n  /* optional: if you want your contracts to only update on event */\n  yourContract?.filters.SetPurpose()\n);\n\n// keep track of a variable from the contract in the local React state:\nconst [purpose, update] = useContractReader(\n  /* the contract */\n  yourContract,\n  /* the contract variable or function to read */\n  yourContract?.purpose,\n  /* the arguments, they are typed tuple */\n  [],\n  undefined,\n  /* optional: update every 10 blocks */\n  { blockNumberInterval: 10 }\n);\n")))}u.isMDXComponent=!0}}]);